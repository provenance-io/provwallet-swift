//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/applications/fee/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the ICS29 Msg service.
///
/// Usage: instantiate `Ibc_Applications_Fee_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Applications_Fee_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Applications_Fee_V1_MsgClientInterceptorFactoryProtocol? { get }

  func registerPayee(
    _ request: Ibc_Applications_Fee_V1_MsgRegisterPayee,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgRegisterPayee, Ibc_Applications_Fee_V1_MsgRegisterPayeeResponse>

  func registerCounterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayee,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayee, Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayeeResponse>

  func payPacketFee(
    _ request: Ibc_Applications_Fee_V1_MsgPayPacketFee,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgPayPacketFee, Ibc_Applications_Fee_V1_MsgPayPacketFeeResponse>

  func payPacketFeeAsync(
    _ request: Ibc_Applications_Fee_V1_MsgPayPacketFeeAsync,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgPayPacketFeeAsync, Ibc_Applications_Fee_V1_MsgPayPacketFeeAsyncResponse>
}

extension Ibc_Applications_Fee_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "ibc.applications.fee.v1.Msg"
  }

  /// RegisterPayee defines a rpc handler method for MsgRegisterPayee
  /// RegisterPayee is called by the relayer on each channelEnd and allows them to set an optional
  /// payee to which reverse and timeout relayer packet fees will be paid out. The payee should be registered on
  /// the source chain from which packets originate as this is where fee distribution takes place. This function may be
  /// called more than once by a relayer, in which case, the latest payee is always used.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterPayee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerPayee(
    _ request: Ibc_Applications_Fee_V1_MsgRegisterPayee,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgRegisterPayee, Ibc_Applications_Fee_V1_MsgRegisterPayeeResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Msg/RegisterPayee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterPayeeInterceptors() ?? []
    )
  }

  /// RegisterCounterpartyPayee defines a rpc handler method for MsgRegisterCounterpartyPayee
  /// RegisterCounterpartyPayee is called by the relayer on each channelEnd and allows them to specify the counterparty
  /// payee address before relaying. This ensures they will be properly compensated for forward relaying since
  /// the destination chain must include the registered counterparty payee address in the acknowledgement. This function
  /// may be called more than once by a relayer, in which case, the latest counterparty payee address is always used.
  ///
  /// - Parameters:
  ///   - request: Request to send to RegisterCounterpartyPayee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func registerCounterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayee,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayee, Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayeeResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Msg/RegisterCounterpartyPayee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterCounterpartyPayeeInterceptors() ?? []
    )
  }

  /// PayPacketFee defines a rpc handler method for MsgPayPacketFee
  /// PayPacketFee is an open callback that may be called by any module/user that wishes to escrow funds in order to
  /// incentivize the relaying of the packet at the next sequence
  /// NOTE: This method is intended to be used within a multi msg transaction, where the subsequent msg that follows
  /// initiates the lifecycle of the incentivized packet
  ///
  /// - Parameters:
  ///   - request: Request to send to PayPacketFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func payPacketFee(
    _ request: Ibc_Applications_Fee_V1_MsgPayPacketFee,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgPayPacketFee, Ibc_Applications_Fee_V1_MsgPayPacketFeeResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Msg/PayPacketFee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayPacketFeeInterceptors() ?? []
    )
  }

  /// PayPacketFeeAsync defines a rpc handler method for MsgPayPacketFeeAsync
  /// PayPacketFeeAsync is an open callback that may be called by any module/user that wishes to escrow funds in order to
  /// incentivize the relaying of a known packet (i.e. at a particular sequence)
  ///
  /// - Parameters:
  ///   - request: Request to send to PayPacketFeeAsync.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func payPacketFeeAsync(
    _ request: Ibc_Applications_Fee_V1_MsgPayPacketFeeAsync,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_MsgPayPacketFeeAsync, Ibc_Applications_Fee_V1_MsgPayPacketFeeAsyncResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Msg/PayPacketFeeAsync",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayPacketFeeAsyncInterceptors() ?? []
    )
  }
}

internal protocol Ibc_Applications_Fee_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'registerPayee'.
  func makeRegisterPayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_MsgRegisterPayee, Ibc_Applications_Fee_V1_MsgRegisterPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'registerCounterpartyPayee'.
  func makeRegisterCounterpartyPayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayee, Ibc_Applications_Fee_V1_MsgRegisterCounterpartyPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'payPacketFee'.
  func makePayPacketFeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_MsgPayPacketFee, Ibc_Applications_Fee_V1_MsgPayPacketFeeResponse>]

  /// - Returns: Interceptors to use when invoking 'payPacketFeeAsync'.
  func makePayPacketFeeAsyncInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_MsgPayPacketFeeAsync, Ibc_Applications_Fee_V1_MsgPayPacketFeeAsyncResponse>]
}

internal final class Ibc_Applications_Fee_V1_MsgClient: Ibc_Applications_Fee_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Fee_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.applications.fee.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Fee_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

