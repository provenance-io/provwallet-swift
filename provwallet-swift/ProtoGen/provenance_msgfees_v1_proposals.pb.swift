// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/msgfees/v1/proposals.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// AddMsgFeeProposal defines a governance proposal to add additional msg based fee
public struct Provenance_Msgfees_V1_AddMsgFeeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// propsal title
  public var title: String = String()

  /// propsal description
  public var description_p: String = String()

  /// type url of msg to add fee
  public var msgTypeURL: String = String()

  /// additional fee for msg type
  public var additionalFee: Cosmos_Base_V1beta1_Coin {
    get {return _additionalFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_additionalFee = newValue}
  }
  /// Returns true if `additionalFee` has been explicitly set.
  public var hasAdditionalFee: Bool {return self._additionalFee != nil}
  /// Clears the value of `additionalFee`. Subsequent reads from it will return its default value.
  public mutating func clearAdditionalFee() {self._additionalFee = nil}

  /// optional recipient to recieve basis points
  public var recipient: String = String()

  /// basis points to use when recipient is present (1 - 10,000)
  public var recipientBasisPoints: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _additionalFee: Cosmos_Base_V1beta1_Coin? = nil
}

/// UpdateMsgFeeProposal defines a governance proposal to update a current msg based fee
public struct Provenance_Msgfees_V1_UpdateMsgFeeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// propsal title
  public var title: String = String()

  /// propsal description
  public var description_p: String = String()

  /// type url of msg to update fee
  public var msgTypeURL: String = String()

  /// additional fee for msg type
  public var additionalFee: Cosmos_Base_V1beta1_Coin {
    get {return _additionalFee ?? Cosmos_Base_V1beta1_Coin()}
    set {_additionalFee = newValue}
  }
  /// Returns true if `additionalFee` has been explicitly set.
  public var hasAdditionalFee: Bool {return self._additionalFee != nil}
  /// Clears the value of `additionalFee`. Subsequent reads from it will return its default value.
  public mutating func clearAdditionalFee() {self._additionalFee = nil}

  /// optional recipient to recieve basis points
  public var recipient: String = String()

  /// basis points to use when recipient is present (1 - 10,000)
  public var recipientBasisPoints: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _additionalFee: Cosmos_Base_V1beta1_Coin? = nil
}

/// RemoveMsgFeeProposal defines a governance proposal to delete a current msg based fee
public struct Provenance_Msgfees_V1_RemoveMsgFeeProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// propsal title
  public var title: String = String()

  /// propsal description
  public var description_p: String = String()

  /// type url of msg fee to remove
  public var msgTypeURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// UpdateNhashPerUsdMilProposal defines a governance proposal to update the nhash per usd mil param
public struct Provenance_Msgfees_V1_UpdateNhashPerUsdMilProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// proposal title
  public var title: String = String()

  /// proposal description
  public var description_p: String = String()

  /// nhash_per_usd_mil is number of nhash per usd mil
  public var nhashPerUsdMil: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// UpdateConversionFeeDenomProposal defines a governance proposal to update the msg fee conversion denom
public struct Provenance_Msgfees_V1_UpdateConversionFeeDenomProposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// proposal title
  public var title: String = String()

  /// proposal description
  public var description_p: String = String()

  /// conversion_fee_denom is the denom that usd will be converted to
  public var conversionFeeDenom: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "provenance.msgfees.v1"

extension Provenance_Msgfees_V1_AddMsgFeeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AddMsgFeeProposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "msg_type_url"),
    4: .standard(proto: "additional_fee"),
    5: .same(proto: "recipient"),
    6: .standard(proto: "recipient_basis_points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._additionalFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.recipientBasisPoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 3)
    }
    if let v = self._additionalFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 5)
    }
    if !self.recipientBasisPoints.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientBasisPoints, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Msgfees_V1_AddMsgFeeProposal, rhs: Provenance_Msgfees_V1_AddMsgFeeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs._additionalFee != rhs._additionalFee {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.recipientBasisPoints != rhs.recipientBasisPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Msgfees_V1_UpdateMsgFeeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateMsgFeeProposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "msg_type_url"),
    4: .standard(proto: "additional_fee"),
    5: .same(proto: "recipient"),
    6: .standard(proto: "recipient_basis_points"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._additionalFee) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.recipient) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.recipientBasisPoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 3)
    }
    if let v = self._additionalFee {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    if !self.recipient.isEmpty {
      try visitor.visitSingularStringField(value: self.recipient, fieldNumber: 5)
    }
    if !self.recipientBasisPoints.isEmpty {
      try visitor.visitSingularStringField(value: self.recipientBasisPoints, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Msgfees_V1_UpdateMsgFeeProposal, rhs: Provenance_Msgfees_V1_UpdateMsgFeeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs._additionalFee != rhs._additionalFee {return false}
    if lhs.recipient != rhs.recipient {return false}
    if lhs.recipientBasisPoints != rhs.recipientBasisPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Msgfees_V1_RemoveMsgFeeProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RemoveMsgFeeProposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "msg_type_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.msgTypeURL) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.msgTypeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.msgTypeURL, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Msgfees_V1_RemoveMsgFeeProposal, rhs: Provenance_Msgfees_V1_RemoveMsgFeeProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.msgTypeURL != rhs.msgTypeURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Msgfees_V1_UpdateNhashPerUsdMilProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateNhashPerUsdMilProposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    3: .standard(proto: "nhash_per_usd_mil"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.nhashPerUsdMil) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if self.nhashPerUsdMil != 0 {
      try visitor.visitSingularUInt64Field(value: self.nhashPerUsdMil, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Msgfees_V1_UpdateNhashPerUsdMilProposal, rhs: Provenance_Msgfees_V1_UpdateNhashPerUsdMilProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.nhashPerUsdMil != rhs.nhashPerUsdMil {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Msgfees_V1_UpdateConversionFeeDenomProposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateConversionFeeDenomProposal"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "description"),
    4: .standard(proto: "conversion_fee_denom"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.description_p) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.conversionFeeDenom) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.conversionFeeDenom.isEmpty {
      try visitor.visitSingularStringField(value: self.conversionFeeDenom, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Msgfees_V1_UpdateConversionFeeDenomProposal, rhs: Provenance_Msgfees_V1_UpdateConversionFeeDenomProposal) -> Bool {
    if lhs.title != rhs.title {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.conversionFeeDenom != rhs.conversionFeeDenom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
