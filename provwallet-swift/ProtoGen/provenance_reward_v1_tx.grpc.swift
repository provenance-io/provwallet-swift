//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/reward/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg
///
/// Usage: instantiate `Provenance_Reward_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Reward_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Reward_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createRewardProgram(
    _ request: Provenance_Reward_V1_MsgCreateRewardProgramRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_MsgCreateRewardProgramRequest, Provenance_Reward_V1_MsgCreateRewardProgramResponse>

  func endRewardProgram(
    _ request: Provenance_Reward_V1_MsgEndRewardProgramRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_MsgEndRewardProgramRequest, Provenance_Reward_V1_MsgEndRewardProgramResponse>

  func claimRewards(
    _ request: Provenance_Reward_V1_MsgClaimRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_MsgClaimRewardsRequest, Provenance_Reward_V1_MsgClaimRewardsResponse>

  func claimAllRewards(
    _ request: Provenance_Reward_V1_MsgClaimAllRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_MsgClaimAllRewardsRequest, Provenance_Reward_V1_MsgClaimAllRewardsResponse>
}

extension Provenance_Reward_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "provenance.reward.v1.Msg"
  }

  /// CreateRewardProgram is the RPC endpoint for creating a rewards program
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateRewardProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createRewardProgram(
    _ request: Provenance_Reward_V1_MsgCreateRewardProgramRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_MsgCreateRewardProgramRequest, Provenance_Reward_V1_MsgCreateRewardProgramResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Msg/CreateRewardProgram",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateRewardProgramInterceptors() ?? []
    )
  }

  /// EndRewardProgram is the RPC endpoint for ending a rewards program
  ///
  /// - Parameters:
  ///   - request: Request to send to EndRewardProgram.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func endRewardProgram(
    _ request: Provenance_Reward_V1_MsgEndRewardProgramRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_MsgEndRewardProgramRequest, Provenance_Reward_V1_MsgEndRewardProgramResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Msg/EndRewardProgram",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeEndRewardProgramInterceptors() ?? []
    )
  }

  /// ClaimRewards is the RPC endpoint for claiming rewards belonging to completed claim periods of a reward program
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimRewards(
    _ request: Provenance_Reward_V1_MsgClaimRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_MsgClaimRewardsRequest, Provenance_Reward_V1_MsgClaimRewardsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Msg/ClaimRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimRewardsInterceptors() ?? []
    )
  }

  /// ClaimAllRewards is the RPC endpoint for claiming rewards for completed claim periods of every reward program for
  /// the signer of the tx.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimAllRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimAllRewards(
    _ request: Provenance_Reward_V1_MsgClaimAllRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_MsgClaimAllRewardsRequest, Provenance_Reward_V1_MsgClaimAllRewardsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Msg/ClaimAllRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimAllRewardsInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Reward_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createRewardProgram'.
  func makeCreateRewardProgramInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_MsgCreateRewardProgramRequest, Provenance_Reward_V1_MsgCreateRewardProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'endRewardProgram'.
  func makeEndRewardProgramInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_MsgEndRewardProgramRequest, Provenance_Reward_V1_MsgEndRewardProgramResponse>]

  /// - Returns: Interceptors to use when invoking 'claimRewards'.
  func makeClaimRewardsInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_MsgClaimRewardsRequest, Provenance_Reward_V1_MsgClaimRewardsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimAllRewards'.
  func makeClaimAllRewardsInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_MsgClaimAllRewardsRequest, Provenance_Reward_V1_MsgClaimAllRewardsResponse>]
}

internal final class Provenance_Reward_V1_MsgClient: Provenance_Reward_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Reward_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.reward.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Reward_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

