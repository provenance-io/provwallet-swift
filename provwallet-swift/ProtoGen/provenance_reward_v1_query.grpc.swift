//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/reward/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service for reward module.
///
/// Usage: instantiate `Provenance_Reward_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Reward_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Reward_V1_QueryClientInterceptorFactoryProtocol? { get }

  func rewardProgramByID(
    _ request: Provenance_Reward_V1_QueryRewardProgramByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardProgramByIDRequest, Provenance_Reward_V1_QueryRewardProgramByIDResponse>

  func rewardPrograms(
    _ request: Provenance_Reward_V1_QueryRewardProgramsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardProgramsRequest, Provenance_Reward_V1_QueryRewardProgramsResponse>

  func claimPeriodRewardDistributions(
    _ request: Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsResponse>

  func claimPeriodRewardDistributionsByID(
    _ request: Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDResponse>

  func rewardDistributionsByAddress(
    _ request: Provenance_Reward_V1_QueryRewardDistributionsByAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardDistributionsByAddressRequest, Provenance_Reward_V1_QueryRewardDistributionsByAddressResponse>
}

extension Provenance_Reward_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "provenance.reward.v1.Query"
  }

  /// RewardProgramByID returns a reward program matching the ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardProgramByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardProgramByID(
    _ request: Provenance_Reward_V1_QueryRewardProgramByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardProgramByIDRequest, Provenance_Reward_V1_QueryRewardProgramByIDResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Query/RewardProgramByID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardProgramByIDInterceptors() ?? []
    )
  }

  /// RewardPrograms returns a list of reward programs matching the query type.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardPrograms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardPrograms(
    _ request: Provenance_Reward_V1_QueryRewardProgramsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardProgramsRequest, Provenance_Reward_V1_QueryRewardProgramsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Query/RewardPrograms",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardProgramsInterceptors() ?? []
    )
  }

  /// ClaimPeriodRewardDistributions returns a list of claim period reward distributions matching the claim_status.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimPeriodRewardDistributions.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimPeriodRewardDistributions(
    _ request: Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Query/ClaimPeriodRewardDistributions",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimPeriodRewardDistributionsInterceptors() ?? []
    )
  }

  /// ClaimPeriodRewardDistributionsByID returns a claim period reward distribution matching the ID.
  ///
  /// - Parameters:
  ///   - request: Request to send to ClaimPeriodRewardDistributionsByID.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func claimPeriodRewardDistributionsByID(
    _ request: Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Query/ClaimPeriodRewardDistributionsByID",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClaimPeriodRewardDistributionsByIDInterceptors() ?? []
    )
  }

  /// RewardDistributionsByAddress returns a list of reward claims belonging to the account and matching the claim
  /// status.
  ///
  /// - Parameters:
  ///   - request: Request to send to RewardDistributionsByAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func rewardDistributionsByAddress(
    _ request: Provenance_Reward_V1_QueryRewardDistributionsByAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Reward_V1_QueryRewardDistributionsByAddressRequest, Provenance_Reward_V1_QueryRewardDistributionsByAddressResponse> {
    return self.makeUnaryCall(
      path: "/provenance.reward.v1.Query/RewardDistributionsByAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRewardDistributionsByAddressInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Reward_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'rewardProgramByID'.
  func makeRewardProgramByIDInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_QueryRewardProgramByIDRequest, Provenance_Reward_V1_QueryRewardProgramByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardPrograms'.
  func makeRewardProgramsInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_QueryRewardProgramsRequest, Provenance_Reward_V1_QueryRewardProgramsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimPeriodRewardDistributions'.
  func makeClaimPeriodRewardDistributionsInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsResponse>]

  /// - Returns: Interceptors to use when invoking 'claimPeriodRewardDistributionsByID'.
  func makeClaimPeriodRewardDistributionsByIDInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDRequest, Provenance_Reward_V1_QueryClaimPeriodRewardDistributionsByIDResponse>]

  /// - Returns: Interceptors to use when invoking 'rewardDistributionsByAddress'.
  func makeRewardDistributionsByAddressInterceptors() -> [ClientInterceptor<Provenance_Reward_V1_QueryRewardDistributionsByAddressRequest, Provenance_Reward_V1_QueryRewardDistributionsByAddressResponse>]
}

internal final class Provenance_Reward_V1_QueryClient: Provenance_Reward_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Reward_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.reward.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Reward_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

