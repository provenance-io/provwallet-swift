//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/nft/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the gRPC querier service.
///
/// Usage: instantiate `Cosmos_Nft_V1beta1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Nft_V1beta1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? { get }

  func balance(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse>

  func owner(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse>

  func supply(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse>

  func nFTs(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse>

  func nFT(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse>

  func class(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse>

  func classes(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse>
}

extension Cosmos_Nft_V1beta1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.nft.v1beta1.Query"
  }

  /// Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Balance.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func balance(
    _ request: Cosmos_Nft_V1beta1_QueryBalanceRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/Balance",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBalanceInterceptors() ?? []
    )
  }

  /// Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func owner(
    _ request: Cosmos_Nft_V1beta1_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/Owner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeOwnerInterceptors() ?? []
    )
  }

  /// Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Cosmos_Nft_V1beta1_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/Supply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSupplyInterceptors() ?? []
    )
  }

  /// NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in
  /// ERC721Enumerable
  ///
  /// - Parameters:
  ///   - request: Request to send to NFTs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFTs(
    _ request: Cosmos_Nft_V1beta1_QueryNFTsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/NFTs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTsInterceptors() ?? []
    )
  }

  /// NFT queries an NFT based on its class and id.
  ///
  /// - Parameters:
  ///   - request: Request to send to NFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFT(
    _ request: Cosmos_Nft_V1beta1_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/NFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeNFTInterceptors() ?? []
    )
  }

  /// Class queries an NFT class based on its id
  ///
  /// - Parameters:
  ///   - request: Request to send to Class.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func class(
    _ request: Cosmos_Nft_V1beta1_QueryClassRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/Class",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassInterceptors() ?? []
    )
  }

  /// Classes queries all NFT classes
  ///
  /// - Parameters:
  ///   - request: Request to send to Classes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func classes(
    _ request: Cosmos_Nft_V1beta1_QueryClassesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.nft.v1beta1.Query/Classes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeClassesInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'balance'.
  func makeBalanceInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryBalanceRequest, Cosmos_Nft_V1beta1_QueryBalanceResponse>]

  /// - Returns: Interceptors to use when invoking 'owner'.
  func makeOwnerInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryOwnerRequest, Cosmos_Nft_V1beta1_QueryOwnerResponse>]

  /// - Returns: Interceptors to use when invoking 'supply'.
  func makeSupplyInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QuerySupplyRequest, Cosmos_Nft_V1beta1_QuerySupplyResponse>]

  /// - Returns: Interceptors to use when invoking 'nFTs'.
  func makeNFTsInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryNFTsRequest, Cosmos_Nft_V1beta1_QueryNFTsResponse>]

  /// - Returns: Interceptors to use when invoking 'nFT'.
  func makeNFTInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryNFTRequest, Cosmos_Nft_V1beta1_QueryNFTResponse>]

  /// - Returns: Interceptors to use when invoking 'class'.
  func makeClassInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryClassRequest, Cosmos_Nft_V1beta1_QueryClassResponse>]

  /// - Returns: Interceptors to use when invoking 'classes'.
  func makeClassesInterceptors() -> [ClientInterceptor<Cosmos_Nft_V1beta1_QueryClassesRequest, Cosmos_Nft_V1beta1_QueryClassesResponse>]
}

internal final class Cosmos_Nft_V1beta1_QueryClient: Cosmos_Nft_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.nft.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Nft_V1beta1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

