// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/metadata/v1/p8e/p8e.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Provenance_Metadata_V1_P8e_DefinitionSpecType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case proposed // = 1
  case fact // = 2
  case factList // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .proposed
    case 2: self = .fact
    case 3: self = .factList
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .proposed: return 1
    case .fact: return 2
    case .factList: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Provenance_Metadata_V1_P8e_DefinitionSpecType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Provenance_Metadata_V1_P8e_DefinitionSpecType] = [
    .unknown,
    .proposed,
    .fact,
    .factList,
  ]
}

#endif  // swift(>=4.2)

public enum Provenance_Metadata_V1_P8e_PublicKeyCurve: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case secp256K1 // = 0
  case p256 // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .secp256K1
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .secp256K1
    case 1: self = .p256
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .secp256K1: return 0
    case .p256: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Provenance_Metadata_V1_P8e_PublicKeyCurve: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Provenance_Metadata_V1_P8e_PublicKeyCurve] = [
    .secp256K1,
    .p256,
  ]
}

#endif  // swift(>=4.2)

public enum Provenance_Metadata_V1_P8e_PublicKeyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case elliptic // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .elliptic
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .elliptic
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .elliptic: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Provenance_Metadata_V1_P8e_PublicKeyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Provenance_Metadata_V1_P8e_PublicKeyType] = [
    .elliptic,
  ]
}

#endif  // swift(>=4.2)

public enum Provenance_Metadata_V1_P8e_ExecutionResultType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case resultTypeUnknown // = 0
  case resultTypePass // = 1

  /// Couldn't process the condition/consideration due to missing facts being generated by other considerations.
  case resultTypeSkip // = 2
  case resultTypeFail // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .resultTypeUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .resultTypeUnknown
    case 1: self = .resultTypePass
    case 2: self = .resultTypeSkip
    case 3: self = .resultTypeFail
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .resultTypeUnknown: return 0
    case .resultTypePass: return 1
    case .resultTypeSkip: return 2
    case .resultTypeFail: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Provenance_Metadata_V1_P8e_ExecutionResultType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Provenance_Metadata_V1_P8e_ExecutionResultType] = [
    .resultTypeUnknown,
    .resultTypePass,
    .resultTypeSkip,
    .resultTypeFail,
  ]
}

#endif  // swift(>=4.2)

public enum Provenance_Metadata_V1_P8e_PartyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case originator // = 1
  case servicer // = 2
  case investor // = 3
  case custodian // = 4
  case owner // = 5
  case affiliate // = 6
  case omnibus // = 7
  case provenance // = 8
  case marker // = 9
  case controller // = 10
  case validator // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .originator
    case 2: self = .servicer
    case 3: self = .investor
    case 4: self = .custodian
    case 5: self = .owner
    case 6: self = .affiliate
    case 7: self = .omnibus
    case 8: self = .provenance
    case 9: self = .marker
    case 10: self = .controller
    case 11: self = .validator
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .originator: return 1
    case .servicer: return 2
    case .investor: return 3
    case .custodian: return 4
    case .owner: return 5
    case .affiliate: return 6
    case .omnibus: return 7
    case .provenance: return 8
    case .marker: return 9
    case .controller: return 10
    case .validator: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Provenance_Metadata_V1_P8e_PartyType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Provenance_Metadata_V1_P8e_PartyType] = [
    .unknown,
    .originator,
    .servicer,
    .investor,
    .custodian,
    .owner,
    .affiliate,
    .omnibus,
    .provenance,
    .marker,
    .controller,
    .validator,
  ]
}

#endif  // swift(>=4.2)

public struct Provenance_Metadata_V1_P8e_Contract {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var definition: Provenance_Metadata_V1_P8e_DefinitionSpec {
    get {return _storage._definition ?? Provenance_Metadata_V1_P8e_DefinitionSpec()}
    set {_uniqueStorage()._definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  public var hasDefinition: Bool {return _storage._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  public mutating func clearDefinition() {_uniqueStorage()._definition = nil}

  /// Points to the proto for the contractSpec
  public var spec: Provenance_Metadata_V1_P8e_Fact {
    get {return _storage._spec ?? Provenance_Metadata_V1_P8e_Fact()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_uniqueStorage()._spec = nil}

  /// Invoker of this contract
  public var invoker: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys {
    get {return _storage._invoker ?? Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys()}
    set {_uniqueStorage()._invoker = newValue}
  }
  /// Returns true if `invoker` has been explicitly set.
  public var hasInvoker: Bool {return _storage._invoker != nil}
  /// Clears the value of `invoker`. Subsequent reads from it will return its default value.
  public mutating func clearInvoker() {_uniqueStorage()._invoker = nil}

  /// Constructor arguments.
  /// These are always the output of a previously recorded consideration.
  public var inputs: [Provenance_Metadata_V1_P8e_Fact] {
    get {return _storage._inputs}
    set {_uniqueStorage()._inputs = newValue}
  }

  /// conditions is a deprecated field that is not used at all anymore.
  public var conditions: [Provenance_Metadata_V1_P8e_Condition] {
    get {return _storage._conditions}
    set {_uniqueStorage()._conditions = newValue}
  }

  public var considerations: [Provenance_Metadata_V1_P8e_Consideration] {
    get {return _storage._considerations}
    set {_uniqueStorage()._considerations = newValue}
  }

  public var recitals: [Provenance_Metadata_V1_P8e_Recital] {
    get {return _storage._recitals}
    set {_uniqueStorage()._recitals = newValue}
  }

  public var timesExecuted: Int32 {
    get {return _storage._timesExecuted}
    set {_uniqueStorage()._timesExecuted = newValue}
  }

  /// This is only set once when the contract is initially executed
  public var startTime: Provenance_Metadata_V1_P8e_Timestamp {
    get {return _storage._startTime ?? Provenance_Metadata_V1_P8e_Timestamp()}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  public var context: Data {
    get {return _storage._context}
    set {_uniqueStorage()._context = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Provenance_Metadata_V1_P8e_DefinitionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var resourceLocation: Provenance_Metadata_V1_P8e_Location {
    get {return _resourceLocation ?? Provenance_Metadata_V1_P8e_Location()}
    set {_resourceLocation = newValue}
  }
  /// Returns true if `resourceLocation` has been explicitly set.
  public var hasResourceLocation: Bool {return self._resourceLocation != nil}
  /// Clears the value of `resourceLocation`. Subsequent reads from it will return its default value.
  public mutating func clearResourceLocation() {self._resourceLocation = nil}

  public var signature: Provenance_Metadata_V1_P8e_Signature {
    get {return _signature ?? Provenance_Metadata_V1_P8e_Signature()}
    set {_signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return self._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {self._signature = nil}

  public var type: Provenance_Metadata_V1_P8e_DefinitionSpecType = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _resourceLocation: Provenance_Metadata_V1_P8e_Location? = nil
  fileprivate var _signature: Provenance_Metadata_V1_P8e_Signature? = nil
}

public struct Provenance_Metadata_V1_P8e_Fact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var dataLocation: Provenance_Metadata_V1_P8e_Location {
    get {return _dataLocation ?? Provenance_Metadata_V1_P8e_Location()}
    set {_dataLocation = newValue}
  }
  /// Returns true if `dataLocation` has been explicitly set.
  public var hasDataLocation: Bool {return self._dataLocation != nil}
  /// Clears the value of `dataLocation`. Subsequent reads from it will return its default value.
  public mutating func clearDataLocation() {self._dataLocation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _dataLocation: Provenance_Metadata_V1_P8e_Location? = nil
}

public struct Provenance_Metadata_V1_P8e_Condition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var conditionName: String = String()

  public var result: Provenance_Metadata_V1_P8e_ExecutionResult {
    get {return _result ?? Provenance_Metadata_V1_P8e_ExecutionResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Provenance_Metadata_V1_P8e_ExecutionResult? = nil
}

public struct Provenance_Metadata_V1_P8e_Consideration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var considerationName: String = String()

  /// Data pushed to a consideration that will ultimately match the output_spec of the consideration
  public var inputs: [Provenance_Metadata_V1_P8e_ProposedFact] = []

  public var result: Provenance_Metadata_V1_P8e_ExecutionResult {
    get {return _result ?? Provenance_Metadata_V1_P8e_ExecutionResult()}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  public var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  public mutating func clearResult() {self._result = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _result: Provenance_Metadata_V1_P8e_ExecutionResult? = nil
}

public struct Provenance_Metadata_V1_P8e_ProposedFact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var hash: String = String()

  public var classname: String = String()

  public var ancestor: Provenance_Metadata_V1_P8e_ProvenanceReference {
    get {return _ancestor ?? Provenance_Metadata_V1_P8e_ProvenanceReference()}
    set {_ancestor = newValue}
  }
  /// Returns true if `ancestor` has been explicitly set.
  public var hasAncestor: Bool {return self._ancestor != nil}
  /// Clears the value of `ancestor`. Subsequent reads from it will return its default value.
  public mutating func clearAncestor() {self._ancestor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ancestor: Provenance_Metadata_V1_P8e_ProvenanceReference? = nil
}

public struct Provenance_Metadata_V1_P8e_ExecutionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var output: Provenance_Metadata_V1_P8e_ProposedFact {
    get {return _output ?? Provenance_Metadata_V1_P8e_ProposedFact()}
    set {_output = newValue}
  }
  /// Returns true if `output` has been explicitly set.
  public var hasOutput: Bool {return self._output != nil}
  /// Clears the value of `output`. Subsequent reads from it will return its default value.
  public mutating func clearOutput() {self._output = nil}

  public var result: Provenance_Metadata_V1_P8e_ExecutionResultType = .resultTypeUnknown

  public var recordedAt: Provenance_Metadata_V1_P8e_Timestamp {
    get {return _recordedAt ?? Provenance_Metadata_V1_P8e_Timestamp()}
    set {_recordedAt = newValue}
  }
  /// Returns true if `recordedAt` has been explicitly set.
  public var hasRecordedAt: Bool {return self._recordedAt != nil}
  /// Clears the value of `recordedAt`. Subsequent reads from it will return its default value.
  public mutating func clearRecordedAt() {self._recordedAt = nil}

  public var errorMessage: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _output: Provenance_Metadata_V1_P8e_ProposedFact? = nil
  fileprivate var _recordedAt: Provenance_Metadata_V1_P8e_Timestamp? = nil
}

public struct Provenance_Metadata_V1_P8e_Recitals {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var parties: [Provenance_Metadata_V1_P8e_Recital] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Provenance_Metadata_V1_P8e_Recital {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var signerRole: Provenance_Metadata_V1_P8e_PartyType = .unknown

  public var signer: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys {
    get {return _signer ?? Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys()}
    set {_signer = newValue}
  }
  /// Returns true if `signer` has been explicitly set.
  public var hasSigner: Bool {return self._signer != nil}
  /// Clears the value of `signer`. Subsequent reads from it will return its default value.
  public mutating func clearSigner() {self._signer = nil}

  public var address: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signer: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys? = nil
}

public struct Provenance_Metadata_V1_P8e_Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ref: Provenance_Metadata_V1_P8e_ProvenanceReference {
    get {return _ref ?? Provenance_Metadata_V1_P8e_ProvenanceReference()}
    set {_ref = newValue}
  }
  /// Returns true if `ref` has been explicitly set.
  public var hasRef: Bool {return self._ref != nil}
  /// Clears the value of `ref`. Subsequent reads from it will return its default value.
  public mutating func clearRef() {self._ref = nil}

  public var classname: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ref: Provenance_Metadata_V1_P8e_ProvenanceReference? = nil
}

public struct Provenance_Metadata_V1_P8e_ProvenanceReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// [Req] [Scope.uuid]
  /// Scope ID
  public var scopeUuid: Provenance_Metadata_V1_P8e_UUID {
    get {return _scopeUuid ?? Provenance_Metadata_V1_P8e_UUID()}
    set {_scopeUuid = newValue}
  }
  /// Returns true if `scopeUuid` has been explicitly set.
  public var hasScopeUuid: Bool {return self._scopeUuid != nil}
  /// Clears the value of `scopeUuid`. Subsequent reads from it will return its default value.
  public mutating func clearScopeUuid() {self._scopeUuid = nil}

  /// [Opt] [RecordGroup.group_uuid]
  /// require record to be within a specific group
  public var groupUuid: Provenance_Metadata_V1_P8e_UUID {
    get {return _groupUuid ?? Provenance_Metadata_V1_P8e_UUID()}
    set {_groupUuid = newValue}
  }
  /// Returns true if `groupUuid` has been explicitly set.
  public var hasGroupUuid: Bool {return self._groupUuid != nil}
  /// Clears the value of `groupUuid`. Subsequent reads from it will return its default value.
  public mutating func clearGroupUuid() {self._groupUuid = nil}

  /// [Opt] [Record.result_hash]
  /// specify a specific record inside a scope (and group) by result-hash
  public var hash: String = String()

  /// [Opt] [Record.result_name]
  /// specify a result-name of a record within a scope
  public var name: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _scopeUuid: Provenance_Metadata_V1_P8e_UUID? = nil
  fileprivate var _groupUuid: Provenance_Metadata_V1_P8e_UUID? = nil
}

public struct Provenance_Metadata_V1_P8e_SignatureSet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var signatures: [Provenance_Metadata_V1_P8e_Signature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Provenance_Metadata_V1_P8e_Signature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signature Detail
  public var algo: String = String()

  public var provider: String = String()

  public var signature: String = String()

  /// Identity of signer
  public var signer: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys {
    get {return _signer ?? Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys()}
    set {_signer = newValue}
  }
  /// Returns true if `signer` has been explicitly set.
  public var hasSigner: Bool {return self._signer != nil}
  /// Clears the value of `signer`. Subsequent reads from it will return its default value.
  public mutating func clearSigner() {self._signer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signer: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys? = nil
}

public struct Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var signingPublicKey: Provenance_Metadata_V1_P8e_PublicKey {
    get {return _signingPublicKey ?? Provenance_Metadata_V1_P8e_PublicKey()}
    set {_signingPublicKey = newValue}
  }
  /// Returns true if `signingPublicKey` has been explicitly set.
  public var hasSigningPublicKey: Bool {return self._signingPublicKey != nil}
  /// Clears the value of `signingPublicKey`. Subsequent reads from it will return its default value.
  public mutating func clearSigningPublicKey() {self._signingPublicKey = nil}

  public var encryptionPublicKey: Provenance_Metadata_V1_P8e_PublicKey {
    get {return _encryptionPublicKey ?? Provenance_Metadata_V1_P8e_PublicKey()}
    set {_encryptionPublicKey = newValue}
  }
  /// Returns true if `encryptionPublicKey` has been explicitly set.
  public var hasEncryptionPublicKey: Bool {return self._encryptionPublicKey != nil}
  /// Clears the value of `encryptionPublicKey`. Subsequent reads from it will return its default value.
  public mutating func clearEncryptionPublicKey() {self._encryptionPublicKey = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _signingPublicKey: Provenance_Metadata_V1_P8e_PublicKey? = nil
  fileprivate var _encryptionPublicKey: Provenance_Metadata_V1_P8e_PublicKey? = nil
}

public struct Provenance_Metadata_V1_P8e_PublicKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var publicKeyBytes: Data = Data()

  public var type: Provenance_Metadata_V1_P8e_PublicKeyType = .elliptic

  public var curve: Provenance_Metadata_V1_P8e_PublicKeyCurve = .secp256K1

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Provenance_Metadata_V1_P8e_UUID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var value: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// A Timestamp represents a point in time using values relative to the epoch.
public struct Provenance_Metadata_V1_P8e_Timestamp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Represents seconds of UTC time since Unix epoch
  public var seconds: Int64 = 0

  /// Non-negative fractions of a second at nanosecond resolution.
  public var nanos: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Provenance_Metadata_V1_P8e_ContractSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var definition: Provenance_Metadata_V1_P8e_DefinitionSpec {
    get {return _storage._definition ?? Provenance_Metadata_V1_P8e_DefinitionSpec()}
    set {_uniqueStorage()._definition = newValue}
  }
  /// Returns true if `definition` has been explicitly set.
  public var hasDefinition: Bool {return _storage._definition != nil}
  /// Clears the value of `definition`. Subsequent reads from it will return its default value.
  public mutating func clearDefinition() {_uniqueStorage()._definition = nil}

  public var inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  public var partiesInvolved: [Provenance_Metadata_V1_P8e_PartyType] {
    get {return _storage._partiesInvolved}
    set {_uniqueStorage()._partiesInvolved = newValue}
  }

  public var conditionSpecs: [Provenance_Metadata_V1_P8e_ConditionSpec] {
    get {return _storage._conditionSpecs}
    set {_uniqueStorage()._conditionSpecs = newValue}
  }

  public var considerationSpecs: [Provenance_Metadata_V1_P8e_ConsiderationSpec] {
    get {return _storage._considerationSpecs}
    set {_uniqueStorage()._considerationSpecs = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Provenance_Metadata_V1_P8e_ConditionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var funcName: String {
    get {return _storage._funcName}
    set {_uniqueStorage()._funcName = newValue}
  }

  public var inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  public var outputSpec: Provenance_Metadata_V1_P8e_OutputSpec {
    get {return _storage._outputSpec ?? Provenance_Metadata_V1_P8e_OutputSpec()}
    set {_uniqueStorage()._outputSpec = newValue}
  }
  /// Returns true if `outputSpec` has been explicitly set.
  public var hasOutputSpec: Bool {return _storage._outputSpec != nil}
  /// Clears the value of `outputSpec`. Subsequent reads from it will return its default value.
  public mutating func clearOutputSpec() {_uniqueStorage()._outputSpec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Provenance_Metadata_V1_P8e_ConsiderationSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var funcName: String {
    get {return _storage._funcName}
    set {_uniqueStorage()._funcName = newValue}
  }

  /// Invoking party
  public var responsibleParty: Provenance_Metadata_V1_P8e_PartyType {
    get {return _storage._responsibleParty}
    set {_uniqueStorage()._responsibleParty = newValue}
  }

  public var inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] {
    get {return _storage._inputSpecs}
    set {_uniqueStorage()._inputSpecs = newValue}
  }

  public var outputSpec: Provenance_Metadata_V1_P8e_OutputSpec {
    get {return _storage._outputSpec ?? Provenance_Metadata_V1_P8e_OutputSpec()}
    set {_uniqueStorage()._outputSpec = newValue}
  }
  /// Returns true if `outputSpec` has been explicitly set.
  public var hasOutputSpec: Bool {return _storage._outputSpec != nil}
  /// Clears the value of `outputSpec`. Subsequent reads from it will return its default value.
  public mutating func clearOutputSpec() {_uniqueStorage()._outputSpec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Provenance_Metadata_V1_P8e_OutputSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var spec: Provenance_Metadata_V1_P8e_DefinitionSpec {
    get {return _spec ?? Provenance_Metadata_V1_P8e_DefinitionSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {self._spec = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _spec: Provenance_Metadata_V1_P8e_DefinitionSpec? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "provenance.metadata.v1.p8e"

extension Provenance_Metadata_V1_P8e_DefinitionSpecType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEFINITION_SPEC_TYPE_UNKNOWN"),
    1: .same(proto: "DEFINITION_SPEC_TYPE_PROPOSED"),
    2: .same(proto: "DEFINITION_SPEC_TYPE_FACT"),
    3: .same(proto: "DEFINITION_SPEC_TYPE_FACT_LIST"),
  ]
}

extension Provenance_Metadata_V1_P8e_PublicKeyCurve: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SECP256K1"),
    1: .same(proto: "P256"),
  ]
}

extension Provenance_Metadata_V1_P8e_PublicKeyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ELLIPTIC"),
  ]
}

extension Provenance_Metadata_V1_P8e_ExecutionResultType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RESULT_TYPE_UNKNOWN"),
    1: .same(proto: "RESULT_TYPE_PASS"),
    2: .same(proto: "RESULT_TYPE_SKIP"),
    3: .same(proto: "RESULT_TYPE_FAIL"),
  ]
}

extension Provenance_Metadata_V1_P8e_PartyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PARTY_TYPE_UNKNOWN"),
    1: .same(proto: "PARTY_TYPE_ORIGINATOR"),
    2: .same(proto: "PARTY_TYPE_SERVICER"),
    3: .same(proto: "PARTY_TYPE_INVESTOR"),
    4: .same(proto: "PARTY_TYPE_CUSTODIAN"),
    5: .same(proto: "PARTY_TYPE_OWNER"),
    6: .same(proto: "PARTY_TYPE_AFFILIATE"),
    7: .same(proto: "PARTY_TYPE_OMNIBUS"),
    8: .same(proto: "PARTY_TYPE_PROVENANCE"),
    9: .same(proto: "PARTY_TYPE_MARKER"),
    10: .same(proto: "PARTY_TYPE_CONTROLLER"),
    11: .same(proto: "PARTY_TYPE_VALIDATOR"),
  ]
}

extension Provenance_Metadata_V1_P8e_Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Contract"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definition"),
    2: .same(proto: "spec"),
    3: .same(proto: "invoker"),
    4: .same(proto: "inputs"),
    5: .same(proto: "conditions"),
    6: .same(proto: "considerations"),
    7: .same(proto: "recitals"),
    8: .standard(proto: "times_executed"),
    9: .standard(proto: "start_time"),
    10: .same(proto: "context"),
  ]

  fileprivate class _StorageClass {
    var _definition: Provenance_Metadata_V1_P8e_DefinitionSpec? = nil
    var _spec: Provenance_Metadata_V1_P8e_Fact? = nil
    var _invoker: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys? = nil
    var _inputs: [Provenance_Metadata_V1_P8e_Fact] = []
    var _conditions: [Provenance_Metadata_V1_P8e_Condition] = []
    var _considerations: [Provenance_Metadata_V1_P8e_Consideration] = []
    var _recitals: [Provenance_Metadata_V1_P8e_Recital] = []
    var _timesExecuted: Int32 = 0
    var _startTime: Provenance_Metadata_V1_P8e_Timestamp? = nil
    var _context: Data = Data()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _definition = source._definition
      _spec = source._spec
      _invoker = source._invoker
      _inputs = source._inputs
      _conditions = source._conditions
      _considerations = source._considerations
      _recitals = source._recitals
      _timesExecuted = source._timesExecuted
      _startTime = source._startTime
      _context = source._context
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._definition) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._invoker) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputs) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._conditions) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._considerations) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._recitals) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._timesExecuted) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._startTime) }()
        case 10: try { try decoder.decodeSingularBytesField(value: &_storage._context) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._invoker {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._inputs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputs, fieldNumber: 4)
      }
      if !_storage._conditions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._conditions, fieldNumber: 5)
      }
      if !_storage._considerations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._considerations, fieldNumber: 6)
      }
      if !_storage._recitals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._recitals, fieldNumber: 7)
      }
      if _storage._timesExecuted != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timesExecuted, fieldNumber: 8)
      }
      if let v = _storage._startTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._context.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._context, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Contract, rhs: Provenance_Metadata_V1_P8e_Contract) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._definition != rhs_storage._definition {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._invoker != rhs_storage._invoker {return false}
        if _storage._inputs != rhs_storage._inputs {return false}
        if _storage._conditions != rhs_storage._conditions {return false}
        if _storage._considerations != rhs_storage._considerations {return false}
        if _storage._recitals != rhs_storage._recitals {return false}
        if _storage._timesExecuted != rhs_storage._timesExecuted {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._context != rhs_storage._context {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_DefinitionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DefinitionSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "resource_location"),
    3: .same(proto: "signature"),
    4: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._resourceLocation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._signature) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._resourceLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if let v = self._signature {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.type != .unknown {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_DefinitionSpec, rhs: Provenance_Metadata_V1_P8e_DefinitionSpec) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._resourceLocation != rhs._resourceLocation {return false}
    if lhs._signature != rhs._signature {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Fact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Fact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "data_location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dataLocation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if let v = self._dataLocation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Fact, rhs: Provenance_Metadata_V1_P8e_Fact) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs._dataLocation != rhs._dataLocation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Condition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Condition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "condition_name"),
    2: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.conditionName) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.conditionName.isEmpty {
      try visitor.visitSingularStringField(value: self.conditionName, fieldNumber: 1)
    }
    if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Condition, rhs: Provenance_Metadata_V1_P8e_Condition) -> Bool {
    if lhs.conditionName != rhs.conditionName {return false}
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Consideration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Consideration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consideration_name"),
    2: .same(proto: "inputs"),
    3: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.considerationName) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.inputs) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._result) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.considerationName.isEmpty {
      try visitor.visitSingularStringField(value: self.considerationName, fieldNumber: 1)
    }
    if !self.inputs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputs, fieldNumber: 2)
    }
    if let v = self._result {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Consideration, rhs: Provenance_Metadata_V1_P8e_Consideration) -> Bool {
    if lhs.considerationName != rhs.considerationName {return false}
    if lhs.inputs != rhs.inputs {return false}
    if lhs._result != rhs._result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ProposedFact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProposedFact"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "hash"),
    3: .same(proto: "classname"),
    4: .same(proto: "ancestor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.classname) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._ancestor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 2)
    }
    if !self.classname.isEmpty {
      try visitor.visitSingularStringField(value: self.classname, fieldNumber: 3)
    }
    if let v = self._ancestor {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ProposedFact, rhs: Provenance_Metadata_V1_P8e_ProposedFact) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.classname != rhs.classname {return false}
    if lhs._ancestor != rhs._ancestor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ExecutionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExecutionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "output"),
    2: .same(proto: "result"),
    3: .standard(proto: "recorded_at"),
    4: .standard(proto: "error_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._output) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.result) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._recordedAt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.errorMessage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._output {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if self.result != .resultTypeUnknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 2)
    }
    if let v = self._recordedAt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if !self.errorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMessage, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ExecutionResult, rhs: Provenance_Metadata_V1_P8e_ExecutionResult) -> Bool {
    if lhs._output != rhs._output {return false}
    if lhs.result != rhs.result {return false}
    if lhs._recordedAt != rhs._recordedAt {return false}
    if lhs.errorMessage != rhs.errorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Recitals: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Recitals"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parties"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.parties) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parties.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.parties, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Recitals, rhs: Provenance_Metadata_V1_P8e_Recitals) -> Bool {
    if lhs.parties != rhs.parties {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Recital: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Recital"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signer_role"),
    2: .same(proto: "signer"),
    3: .same(proto: "address"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.signerRole) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._signer) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.address) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.signerRole != .unknown {
      try visitor.visitSingularEnumField(value: self.signerRole, fieldNumber: 1)
    }
    if let v = self._signer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Recital, rhs: Provenance_Metadata_V1_P8e_Recital) -> Bool {
    if lhs.signerRole != rhs.signerRole {return false}
    if lhs._signer != rhs._signer {return false}
    if lhs.address != rhs.address {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Location"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ref"),
    2: .same(proto: "classname"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._ref) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.classname) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._ref {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.classname.isEmpty {
      try visitor.visitSingularStringField(value: self.classname, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Location, rhs: Provenance_Metadata_V1_P8e_Location) -> Bool {
    if lhs._ref != rhs._ref {return false}
    if lhs.classname != rhs.classname {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ProvenanceReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProvenanceReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "scope_uuid"),
    2: .standard(proto: "group_uuid"),
    3: .same(proto: "hash"),
    4: .same(proto: "name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._scopeUuid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._groupUuid) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.hash) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._scopeUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._groupUuid {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularStringField(value: self.hash, fieldNumber: 3)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ProvenanceReference, rhs: Provenance_Metadata_V1_P8e_ProvenanceReference) -> Bool {
    if lhs._scopeUuid != rhs._scopeUuid {return false}
    if lhs._groupUuid != rhs._groupUuid {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_SignatureSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SignatureSet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.signatures) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.signatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.signatures, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_SignatureSet, rhs: Provenance_Metadata_V1_P8e_SignatureSet) -> Bool {
    if lhs.signatures != rhs.signatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Signature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Signature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "algo"),
    2: .same(proto: "provider"),
    3: .same(proto: "signature"),
    4: .same(proto: "signer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.algo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.provider) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.signature) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._signer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.algo.isEmpty {
      try visitor.visitSingularStringField(value: self.algo, fieldNumber: 1)
    }
    if !self.provider.isEmpty {
      try visitor.visitSingularStringField(value: self.provider, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 3)
    }
    if let v = self._signer {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Signature, rhs: Provenance_Metadata_V1_P8e_Signature) -> Bool {
    if lhs.algo != rhs.algo {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs._signer != rhs._signer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SigningAndEncryptionPublicKeys"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signing_public_key"),
    2: .standard(proto: "encryption_public_key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._signingPublicKey) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._encryptionPublicKey) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._signingPublicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._encryptionPublicKey {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys, rhs: Provenance_Metadata_V1_P8e_SigningAndEncryptionPublicKeys) -> Bool {
    if lhs._signingPublicKey != rhs._signingPublicKey {return false}
    if lhs._encryptionPublicKey != rhs._encryptionPublicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_PublicKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublicKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key_bytes"),
    2: .same(proto: "type"),
    3: .same(proto: "curve"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.publicKeyBytes) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.curve) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKeyBytes.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKeyBytes, fieldNumber: 1)
    }
    if self.type != .elliptic {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.curve != .secp256K1 {
      try visitor.visitSingularEnumField(value: self.curve, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_PublicKey, rhs: Provenance_Metadata_V1_P8e_PublicKey) -> Bool {
    if lhs.publicKeyBytes != rhs.publicKeyBytes {return false}
    if lhs.type != rhs.type {return false}
    if lhs.curve != rhs.curve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_UUID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UUID"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.value) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_UUID, rhs: Provenance_Metadata_V1_P8e_UUID) -> Bool {
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_Timestamp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Timestamp"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seconds"),
    2: .same(proto: "nanos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.seconds) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.nanos) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.seconds != 0 {
      try visitor.visitSingularInt64Field(value: self.seconds, fieldNumber: 1)
    }
    if self.nanos != 0 {
      try visitor.visitSingularInt32Field(value: self.nanos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_Timestamp, rhs: Provenance_Metadata_V1_P8e_Timestamp) -> Bool {
    if lhs.seconds != rhs.seconds {return false}
    if lhs.nanos != rhs.nanos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ContractSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContractSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "definition"),
    2: .standard(proto: "input_specs"),
    3: .standard(proto: "parties_involved"),
    4: .standard(proto: "condition_specs"),
    5: .standard(proto: "consideration_specs"),
  ]

  fileprivate class _StorageClass {
    var _definition: Provenance_Metadata_V1_P8e_DefinitionSpec? = nil
    var _inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] = []
    var _partiesInvolved: [Provenance_Metadata_V1_P8e_PartyType] = []
    var _conditionSpecs: [Provenance_Metadata_V1_P8e_ConditionSpec] = []
    var _considerationSpecs: [Provenance_Metadata_V1_P8e_ConsiderationSpec] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _definition = source._definition
      _inputSpecs = source._inputSpecs
      _partiesInvolved = source._partiesInvolved
      _conditionSpecs = source._conditionSpecs
      _considerationSpecs = source._considerationSpecs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._definition) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 3: try { try decoder.decodeRepeatedEnumField(value: &_storage._partiesInvolved) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._conditionSpecs) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._considerationSpecs) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._definition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 2)
      }
      if !_storage._partiesInvolved.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._partiesInvolved, fieldNumber: 3)
      }
      if !_storage._conditionSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._conditionSpecs, fieldNumber: 4)
      }
      if !_storage._considerationSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._considerationSpecs, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ContractSpec, rhs: Provenance_Metadata_V1_P8e_ContractSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._definition != rhs_storage._definition {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._partiesInvolved != rhs_storage._partiesInvolved {return false}
        if _storage._conditionSpecs != rhs_storage._conditionSpecs {return false}
        if _storage._considerationSpecs != rhs_storage._considerationSpecs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ConditionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConditionSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_name"),
    2: .standard(proto: "input_specs"),
    3: .standard(proto: "output_spec"),
  ]

  fileprivate class _StorageClass {
    var _funcName: String = String()
    var _inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] = []
    var _outputSpec: Provenance_Metadata_V1_P8e_OutputSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _funcName = source._funcName
      _inputSpecs = source._inputSpecs
      _outputSpec = source._outputSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._funcName) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._outputSpec) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._funcName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._funcName, fieldNumber: 1)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 2)
      }
      if let v = _storage._outputSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ConditionSpec, rhs: Provenance_Metadata_V1_P8e_ConditionSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcName != rhs_storage._funcName {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._outputSpec != rhs_storage._outputSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_ConsiderationSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsiderationSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_name"),
    2: .standard(proto: "responsible_party"),
    3: .standard(proto: "input_specs"),
    4: .standard(proto: "output_spec"),
  ]

  fileprivate class _StorageClass {
    var _funcName: String = String()
    var _responsibleParty: Provenance_Metadata_V1_P8e_PartyType = .unknown
    var _inputSpecs: [Provenance_Metadata_V1_P8e_DefinitionSpec] = []
    var _outputSpec: Provenance_Metadata_V1_P8e_OutputSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _funcName = source._funcName
      _responsibleParty = source._responsibleParty
      _inputSpecs = source._inputSpecs
      _outputSpec = source._outputSpec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._funcName) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._responsibleParty) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._inputSpecs) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._outputSpec) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._funcName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._funcName, fieldNumber: 1)
      }
      if _storage._responsibleParty != .unknown {
        try visitor.visitSingularEnumField(value: _storage._responsibleParty, fieldNumber: 2)
      }
      if !_storage._inputSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputSpecs, fieldNumber: 3)
      }
      if let v = _storage._outputSpec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_ConsiderationSpec, rhs: Provenance_Metadata_V1_P8e_ConsiderationSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcName != rhs_storage._funcName {return false}
        if _storage._responsibleParty != rhs_storage._responsibleParty {return false}
        if _storage._inputSpecs != rhs_storage._inputSpecs {return false}
        if _storage._outputSpec != rhs_storage._outputSpec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Provenance_Metadata_V1_P8e_OutputSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spec"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Metadata_V1_P8e_OutputSpec, rhs: Provenance_Metadata_V1_P8e_OutputSpec) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
