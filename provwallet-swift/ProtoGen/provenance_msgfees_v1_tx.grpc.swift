//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: provenance/msgfees/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg defines the msgfees Msg service.
///
/// Usage: instantiate `Provenance_Msgfees_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Provenance_Msgfees_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Provenance_Msgfees_V1_MsgClientInterceptorFactoryProtocol? { get }

  func assessCustomMsgFee(
    _ request: Provenance_Msgfees_V1_MsgAssessCustomMsgFeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Provenance_Msgfees_V1_MsgAssessCustomMsgFeeRequest, Provenance_Msgfees_V1_MsgAssessCustomMsgFeeResponse>
}

extension Provenance_Msgfees_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "provenance.msgfees.v1.Msg"
  }

  /// AssessCustomMsgFee endpoint executes the additional fee charges.
  /// This will only emit the event and not persist it to the keeper.  Fees are handled with the custom msg fee handlers
  /// Use Case: smart contracts will be able to charge additional fees and direct partial funds to specified recipient
  /// for executing contracts
  ///
  /// - Parameters:
  ///   - request: Request to send to AssessCustomMsgFee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func assessCustomMsgFee(
    _ request: Provenance_Msgfees_V1_MsgAssessCustomMsgFeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Provenance_Msgfees_V1_MsgAssessCustomMsgFeeRequest, Provenance_Msgfees_V1_MsgAssessCustomMsgFeeResponse> {
    return self.makeUnaryCall(
      path: "/provenance.msgfees.v1.Msg/AssessCustomMsgFee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAssessCustomMsgFeeInterceptors() ?? []
    )
  }
}

internal protocol Provenance_Msgfees_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'assessCustomMsgFee'.
  func makeAssessCustomMsgFeeInterceptors() -> [ClientInterceptor<Provenance_Msgfees_V1_MsgAssessCustomMsgFeeRequest, Provenance_Msgfees_V1_MsgAssessCustomMsgFeeResponse>]
}

internal final class Provenance_Msgfees_V1_MsgClient: Provenance_Msgfees_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Provenance_Msgfees_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the provenance.msgfees.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Provenance_Msgfees_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

