// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: provenance/reward/v1/genesis.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// GenesisState defines the reward module's genesis state.
public struct Provenance_Reward_V1_GenesisState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Reward program id is the next auto incremented id to be assigned to the next created reward program
  public var rewardProgramID: UInt64 = 0

  /// Reward programs to initially start with.
  public var rewardPrograms: [Provenance_Reward_V1_RewardProgram] = []

  /// Claim period reward distributions to initially start with.
  public var claimPeriodRewardDistributions: [Provenance_Reward_V1_ClaimPeriodRewardDistribution] = []

  /// Reward account states to initially start with.
  public var rewardAccountStates: [Provenance_Reward_V1_RewardAccountState] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "provenance.reward.v1"

extension Provenance_Reward_V1_GenesisState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenesisState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reward_program_id"),
    2: .standard(proto: "reward_programs"),
    3: .standard(proto: "claim_period_reward_distributions"),
    4: .standard(proto: "reward_account_states"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.rewardProgramID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.rewardPrograms) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.claimPeriodRewardDistributions) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.rewardAccountStates) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.rewardProgramID != 0 {
      try visitor.visitSingularUInt64Field(value: self.rewardProgramID, fieldNumber: 1)
    }
    if !self.rewardPrograms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardPrograms, fieldNumber: 2)
    }
    if !self.claimPeriodRewardDistributions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.claimPeriodRewardDistributions, fieldNumber: 3)
    }
    if !self.rewardAccountStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rewardAccountStates, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Provenance_Reward_V1_GenesisState, rhs: Provenance_Reward_V1_GenesisState) -> Bool {
    if lhs.rewardProgramID != rhs.rewardProgramID {return false}
    if lhs.rewardPrograms != rhs.rewardPrograms {return false}
    if lhs.claimPeriodRewardDistributions != rhs.claimPeriodRewardDistributions {return false}
    if lhs.rewardAccountStates != rhs.rewardAccountStates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
