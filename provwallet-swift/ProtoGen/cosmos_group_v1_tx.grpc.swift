//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Msg is the cosmos.group.v1 Msg service.
///
/// Usage: instantiate `Cosmos_Group_V1_MsgClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1_MsgClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? { get }

  func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>

  func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>

  func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>

  func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>

  func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>

  func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>

  func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>

  func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>

  func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>

  func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>

  func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>

  func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>

  func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>

  func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>
}

extension Cosmos_Group_V1_MsgClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1.Msg"
  }

  /// CreateGroup creates a new group with an admin account address, a list of members and some optional metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroup(
    _ request: Cosmos_Group_V1_MsgCreateGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/CreateGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupInterceptors() ?? []
    )
  }

  /// UpdateGroupMembers updates the group members with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMembers(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMembers,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupMembers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMembersInterceptors() ?? []
    )
  }

  /// UpdateGroupAdmin updates the group admin with given group id and previous admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupMetadata updates the group metadata with given group id and admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupMetadataInterceptors() ?? []
    )
  }

  /// CreateGroupPolicy creates a new group policy using given DecisionPolicy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/CreateGroupPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupPolicyInterceptors() ?? []
    )
  }

  /// CreateGroupWithPolicy creates a new group with policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateGroupWithPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createGroupWithPolicy(
    _ request: Cosmos_Group_V1_MsgCreateGroupWithPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/CreateGroupWithPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateGroupWithPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyAdmin updates a group policy admin.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyAdmin(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyAdminInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyDecisionPolicy allows a group policy's decision policy to be updated.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyDecisionPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyDecisionPolicy(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyDecisionPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyDecisionPolicyInterceptors() ?? []
    )
  }

  /// UpdateGroupPolicyMetadata updates a group policy metadata.
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateGroupPolicyMetadata.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateGroupPolicyMetadata(
    _ request: Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/UpdateGroupPolicyMetadata",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateGroupPolicyMetadataInterceptors() ?? []
    )
  }

  /// SubmitProposal submits a new proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitProposal(
    _ request: Cosmos_Group_V1_MsgSubmitProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/SubmitProposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitProposalInterceptors() ?? []
    )
  }

  /// WithdrawProposal withdraws a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to WithdrawProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func withdrawProposal(
    _ request: Cosmos_Group_V1_MsgWithdrawProposal,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/WithdrawProposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeWithdrawProposalInterceptors() ?? []
    )
  }

  /// Vote allows a voter to vote on a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Vote.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func vote(
    _ request: Cosmos_Group_V1_MsgVote,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/Vote",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteInterceptors() ?? []
    )
  }

  /// Exec executes a proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to Exec.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func exec(
    _ request: Cosmos_Group_V1_MsgExec,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/Exec",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeExecInterceptors() ?? []
    )
  }

  /// LeaveGroup allows a group member to leave the group.
  ///
  /// - Parameters:
  ///   - request: Request to send to LeaveGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func leaveGroup(
    _ request: Cosmos_Group_V1_MsgLeaveGroup,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Msg/LeaveGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLeaveGroupInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'createGroup'.
  func makeCreateGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroup, Cosmos_Group_V1_MsgCreateGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMembers'.
  func makeUpdateGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMembers, Cosmos_Group_V1_MsgUpdateGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupAdmin'.
  func makeUpdateGroupAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupAdmin, Cosmos_Group_V1_MsgUpdateGroupAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupMetadata'.
  func makeUpdateGroupMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupMetadata, Cosmos_Group_V1_MsgUpdateGroupMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupPolicy'.
  func makeCreateGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupPolicy, Cosmos_Group_V1_MsgCreateGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'createGroupWithPolicy'.
  func makeCreateGroupWithPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgCreateGroupWithPolicy, Cosmos_Group_V1_MsgCreateGroupWithPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyAdmin'.
  func makeUpdateGroupPolicyAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyAdmin, Cosmos_Group_V1_MsgUpdateGroupPolicyAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyDecisionPolicy'.
  func makeUpdateGroupPolicyDecisionPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicy, Cosmos_Group_V1_MsgUpdateGroupPolicyDecisionPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'updateGroupPolicyMetadata'.
  func makeUpdateGroupPolicyMetadataInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgUpdateGroupPolicyMetadata, Cosmos_Group_V1_MsgUpdateGroupPolicyMetadataResponse>]

  /// - Returns: Interceptors to use when invoking 'submitProposal'.
  func makeSubmitProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgSubmitProposal, Cosmos_Group_V1_MsgSubmitProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'withdrawProposal'.
  func makeWithdrawProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgWithdrawProposal, Cosmos_Group_V1_MsgWithdrawProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'vote'.
  func makeVoteInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgVote, Cosmos_Group_V1_MsgVoteResponse>]

  /// - Returns: Interceptors to use when invoking 'exec'.
  func makeExecInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgExec, Cosmos_Group_V1_MsgExecResponse>]

  /// - Returns: Interceptors to use when invoking 'leaveGroup'.
  func makeLeaveGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_MsgLeaveGroup, Cosmos_Group_V1_MsgLeaveGroupResponse>]
}

internal final class Cosmos_Group_V1_MsgClient: Cosmos_Group_V1_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_MsgClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

