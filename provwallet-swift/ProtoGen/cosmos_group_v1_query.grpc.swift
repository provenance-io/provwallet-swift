//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/group/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query is the cosmos.group.v1 Query service.
///
/// Usage: instantiate `Cosmos_Group_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Cosmos_Group_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? { get }

  func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>

  func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>

  func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>

  func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>

  func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>

  func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>

  func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>

  func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>

  func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>

  func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>

  func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>

  func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>

  func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>
}

extension Cosmos_Group_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "cosmos.group.v1.Query"
  }

  /// GroupInfo queries group info based on group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupInfo(
    _ request: Cosmos_Group_V1_QueryGroupInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupInfoInterceptors() ?? []
    )
  }

  /// GroupPolicyInfo queries group policy info based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPolicyInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPolicyInfo(
    _ request: Cosmos_Group_V1_QueryGroupPolicyInfoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupPolicyInfo",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPolicyInfoInterceptors() ?? []
    )
  }

  /// GroupMembers queries members of a group
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupMembers.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupMembers(
    _ request: Cosmos_Group_V1_QueryGroupMembersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupMembers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupMembersInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries groups by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupsByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupsByAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByAdminInterceptors() ?? []
    )
  }

  /// GroupPoliciesByGroup queries group policies by group id.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByGroup.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByGroup(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupPoliciesByGroup",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByGroupInterceptors() ?? []
    )
  }

  /// GroupsByAdmin queries group policies by admin address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupPoliciesByAdmin.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupPoliciesByAdmin(
    _ request: Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupPoliciesByAdmin",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupPoliciesByAdminInterceptors() ?? []
    )
  }

  /// Proposal queries a proposal based on proposal id.
  ///
  /// - Parameters:
  ///   - request: Request to send to Proposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposal(
    _ request: Cosmos_Group_V1_QueryProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/Proposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalInterceptors() ?? []
    )
  }

  /// ProposalsByGroupPolicy queries proposals based on account address of group policy.
  ///
  /// - Parameters:
  ///   - request: Request to send to ProposalsByGroupPolicy.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func proposalsByGroupPolicy(
    _ request: Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/ProposalsByGroupPolicy",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeProposalsByGroupPolicyInterceptors() ?? []
    )
  }

  /// VoteByProposalVoter queries a vote by proposal id and voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VoteByProposalVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func voteByProposalVoter(
    _ request: Cosmos_Group_V1_QueryVoteByProposalVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/VoteByProposalVoter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVoteByProposalVoterInterceptors() ?? []
    )
  }

  /// VotesByProposal queries a vote by proposal.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByProposal.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByProposal(
    _ request: Cosmos_Group_V1_QueryVotesByProposalRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/VotesByProposal",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByProposalInterceptors() ?? []
    )
  }

  /// VotesByVoter queries a vote by voter.
  ///
  /// - Parameters:
  ///   - request: Request to send to VotesByVoter.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func votesByVoter(
    _ request: Cosmos_Group_V1_QueryVotesByVoterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/VotesByVoter",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeVotesByVoterInterceptors() ?? []
    )
  }

  /// GroupsByMember queries groups by member address.
  ///
  /// - Parameters:
  ///   - request: Request to send to GroupsByMember.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func groupsByMember(
    _ request: Cosmos_Group_V1_QueryGroupsByMemberRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/GroupsByMember",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGroupsByMemberInterceptors() ?? []
    )
  }

  /// TallyResult returns the tally result of a proposal. If the proposal is
  /// still in voting period, then this query computes the current tally state,
  /// which might not be final. On the other hand, if the proposal is final,
  /// then it simply returns the `final_tally_result` state stored in the
  /// proposal itself.
  ///
  /// - Parameters:
  ///   - request: Request to send to TallyResult.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func tallyResult(
    _ request: Cosmos_Group_V1_QueryTallyResultRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.group.v1.Query/TallyResult",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTallyResultInterceptors() ?? []
    )
  }
}

internal protocol Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'groupInfo'.
  func makeGroupInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupInfoRequest, Cosmos_Group_V1_QueryGroupInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPolicyInfo'.
  func makeGroupPolicyInfoInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPolicyInfoRequest, Cosmos_Group_V1_QueryGroupPolicyInfoResponse>]

  /// - Returns: Interceptors to use when invoking 'groupMembers'.
  func makeGroupMembersInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupMembersRequest, Cosmos_Group_V1_QueryGroupMembersResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByAdmin'.
  func makeGroupsByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByAdminRequest, Cosmos_Group_V1_QueryGroupsByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByGroup'.
  func makeGroupPoliciesByGroupInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByGroupRequest, Cosmos_Group_V1_QueryGroupPoliciesByGroupResponse>]

  /// - Returns: Interceptors to use when invoking 'groupPoliciesByAdmin'.
  func makeGroupPoliciesByAdminInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupPoliciesByAdminRequest, Cosmos_Group_V1_QueryGroupPoliciesByAdminResponse>]

  /// - Returns: Interceptors to use when invoking 'proposal'.
  func makeProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalRequest, Cosmos_Group_V1_QueryProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'proposalsByGroupPolicy'.
  func makeProposalsByGroupPolicyInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryProposalsByGroupPolicyRequest, Cosmos_Group_V1_QueryProposalsByGroupPolicyResponse>]

  /// - Returns: Interceptors to use when invoking 'voteByProposalVoter'.
  func makeVoteByProposalVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVoteByProposalVoterRequest, Cosmos_Group_V1_QueryVoteByProposalVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByProposal'.
  func makeVotesByProposalInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByProposalRequest, Cosmos_Group_V1_QueryVotesByProposalResponse>]

  /// - Returns: Interceptors to use when invoking 'votesByVoter'.
  func makeVotesByVoterInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryVotesByVoterRequest, Cosmos_Group_V1_QueryVotesByVoterResponse>]

  /// - Returns: Interceptors to use when invoking 'groupsByMember'.
  func makeGroupsByMemberInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryGroupsByMemberRequest, Cosmos_Group_V1_QueryGroupsByMemberResponse>]

  /// - Returns: Interceptors to use when invoking 'tallyResult'.
  func makeTallyResultInterceptors() -> [ClientInterceptor<Cosmos_Group_V1_QueryTallyResultRequest, Cosmos_Group_V1_QueryTallyResultResponse>]
}

internal final class Cosmos_Group_V1_QueryClient: Cosmos_Group_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the cosmos.group.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cosmos_Group_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

