//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: ibc/applications/fee/v1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Query defines the ICS29 gRPC querier service.
///
/// Usage: instantiate `Ibc_Applications_Fee_V1_QueryClient`, then call methods of this protocol to make API calls.
internal protocol Ibc_Applications_Fee_V1_QueryClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? { get }

  func incentivizedPackets(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>

  func incentivizedPacket(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>

  func incentivizedPacketsForChannel(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>

  func totalRecvFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>

  func totalAckFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>

  func totalTimeoutFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>

  func payee(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>

  func counterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>

  func feeEnabledChannels(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>

  func feeEnabledChannel(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>
}

extension Ibc_Applications_Fee_V1_QueryClientProtocol {
  internal var serviceName: String {
    return "ibc.applications.fee.v1.Query"
  }

  /// IncentivizedPackets returns all incentivized packets and their associated fees
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPackets.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPackets(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/IncentivizedPackets",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsInterceptors() ?? []
    )
  }

  /// IncentivizedPacket returns all packet fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPacket.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPacket(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacket",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketInterceptors() ?? []
    )
  }

  /// Gets all incentivized packets for a specific channel
  ///
  /// - Parameters:
  ///   - request: Request to send to IncentivizedPacketsForChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func incentivizedPacketsForChannel(
    _ request: Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/IncentivizedPacketsForChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeIncentivizedPacketsForChannelInterceptors() ?? []
    )
  }

  /// TotalRecvFees returns the total receive fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalRecvFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalRecvFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/TotalRecvFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalRecvFeesInterceptors() ?? []
    )
  }

  /// TotalAckFees returns the total acknowledgement fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalAckFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalAckFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/TotalAckFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalAckFeesInterceptors() ?? []
    )
  }

  /// TotalTimeoutFees returns the total timeout fees for a packet given its identifier
  ///
  /// - Parameters:
  ///   - request: Request to send to TotalTimeoutFees.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func totalTimeoutFees(
    _ request: Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/TotalTimeoutFees",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTotalTimeoutFeesInterceptors() ?? []
    )
  }

  /// Payee returns the registered payee address for a specific channel given the relayer address
  ///
  /// - Parameters:
  ///   - request: Request to send to Payee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func payee(
    _ request: Ibc_Applications_Fee_V1_QueryPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/Payee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePayeeInterceptors() ?? []
    )
  }

  /// CounterpartyPayee returns the registered counterparty payee for forward relaying
  ///
  /// - Parameters:
  ///   - request: Request to send to CounterpartyPayee.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func counterpartyPayee(
    _ request: Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/CounterpartyPayee",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCounterpartyPayeeInterceptors() ?? []
    )
  }

  /// FeeEnabledChannels returns a list of all fee enabled channels
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeEnabledChannels.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeEnabledChannels(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannels",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelsInterceptors() ?? []
    )
  }

  /// FeeEnabledChannel returns true if the provided port and channel identifiers belong to a fee enabled channel
  ///
  /// - Parameters:
  ///   - request: Request to send to FeeEnabledChannel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeEnabledChannel(
    _ request: Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse> {
    return self.makeUnaryCall(
      path: "/ibc.applications.fee.v1.Query/FeeEnabledChannel",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFeeEnabledChannelInterceptors() ?? []
    )
  }
}

internal protocol Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'incentivizedPackets'.
  func makeIncentivizedPacketsInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPacket'.
  func makeIncentivizedPacketInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketResponse>]

  /// - Returns: Interceptors to use when invoking 'incentivizedPacketsForChannel'.
  func makeIncentivizedPacketsForChannelInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelRequest, Ibc_Applications_Fee_V1_QueryIncentivizedPacketsForChannelResponse>]

  /// - Returns: Interceptors to use when invoking 'totalRecvFees'.
  func makeTotalRecvFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalRecvFeesRequest, Ibc_Applications_Fee_V1_QueryTotalRecvFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalAckFees'.
  func makeTotalAckFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalAckFeesRequest, Ibc_Applications_Fee_V1_QueryTotalAckFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'totalTimeoutFees'.
  func makeTotalTimeoutFeesInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesRequest, Ibc_Applications_Fee_V1_QueryTotalTimeoutFeesResponse>]

  /// - Returns: Interceptors to use when invoking 'payee'.
  func makePayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryPayeeRequest, Ibc_Applications_Fee_V1_QueryPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'counterpartyPayee'.
  func makeCounterpartyPayeeInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryCounterpartyPayeeRequest, Ibc_Applications_Fee_V1_QueryCounterpartyPayeeResponse>]

  /// - Returns: Interceptors to use when invoking 'feeEnabledChannels'.
  func makeFeeEnabledChannelsInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelsResponse>]

  /// - Returns: Interceptors to use when invoking 'feeEnabledChannel'.
  func makeFeeEnabledChannelInterceptors() -> [ClientInterceptor<Ibc_Applications_Fee_V1_QueryFeeEnabledChannelRequest, Ibc_Applications_Fee_V1_QueryFeeEnabledChannelResponse>]
}

internal final class Ibc_Applications_Fee_V1_QueryClient: Ibc_Applications_Fee_V1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol?

  /// Creates a client for the ibc.applications.fee.v1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Ibc_Applications_Fee_V1_QueryClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

